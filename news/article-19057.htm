<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <link rel="canonical" href="https://clashgithub.github.io/news/article-19057.htm" />
<title>【数据结构之线性表】顺序表简单实现图书系统</title>
<!-- for-mobile-apps -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="__ADDON__/img/clashgithub/favicon.ico" type="image/x-icon"/>
<meta name="description" content="&nbsp; &nbsp; &nbsp; &nbsp; 本次图书系统使用DEV C++软件来进行操作实现。实现语言是c++。 实现图书系统使用到了顺序表的初始化、顺序表的建立、顺序表的插入、顺序表的删" />
<script type="application/x-javascript"> addEventListener("load", function() { setTimeout(hideURLbar, 0); }, false);
		function hideURLbar(){ window.scrollTo(0,1); } </script>
<!-- //for-mobile-apps -->
<link href="/assets/website/css/clashgithub/bootstrap.css" rel="stylesheet" type="text/css" media="all" />
<link href="/assets/website/css/clashgithub/style.css" rel="stylesheet" type="text/css" media="all" />
<!-- js -->
<script type="text/javascript" src="/assets/website/js/frontend/clashgithub/jquery-2.1.4.min.js"></script>
<!-- //js -->
<link href='https://fonts.googleapis.com/css?family=Maven+Pro:400,500,700,900' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,600,600italic,700,700italic,800,800italic' rel='stylesheet' type='text/css'>
<!-- start-smoth-scrolling -->
<script type="text/javascript">
	jQuery(document).ready(function($) {
		$(".scroll").click(function(event){		
			event.preventDefault();
			$('html,body').animate({scrollTop:$(this.hash).offset().top},1000);
		});
	});
</script>
<!-- start-smoth-scrolling -->
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-GD12V8FJRL"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-GD12V8FJRL');
</script>
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- header -->
	<div class="header" id="ban">
		<div class="container">
			<div class="w3ls_logo">
								<a href="/">Clash Github</a>
							</div>
			<div class="header_right">
			<nav class="navbar navbar-default">
				<!-- Brand and toggle get grouped for better mobile display -->
				<div class="navbar-header">
					<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
						<span class="sr-only">Toggle navigation</span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
						<span class="icon-bar"></span>
					</button>
				</div>

				<!-- Collect the nav links, forms, and other content for toggling -->
				<div class="collapse navbar-collapse nav-wil" id="bs-example-navbar-collapse-1">
					<nav class="link-effect-7" id="link-effect-7">
						<ul class="nav navbar-nav">
														<li><a href="/">首页</a></li>
														<li><a href="/free-nodes/">免费节点</a></li>
														<li><a href="/paid-subscribe/">推荐机场</a></li>
														<li><a href="/news/">新闻资讯</a></li>
														<li><a href="#">关于</a></li>
							<li><a href="#">联系</a></li>
						</ul>
					</nav>
				</div>
				<!-- /.navbar-collapse -->
			</nav>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //header -->
    <!-- about -->
    <div class="about">
        <div class="container">
            <h1 style="word-break: break-all;">【数据结构之线性表】顺序表简单实现图书系统</h1>
            <ul>
                <li><a href="/">首页</a><i>|</i></li>
                <li><a href="/news/">新闻资讯</a><i>|</i></li>
                <li>正文</li>
            </ul>
        </div>
    </div>
    <!-- //about -->
    <!-- single -->
    <div class="single">
        <div class="container">
            <div class="col-md-9">
                                  				  				  				<div id="content_views" class="htmledit_views"> <p>&nbsp; &nbsp; &nbsp; &nbsp; 本次图书系统使用DEV C++软件来进行操作实现。实现语言是c++。</p> <p>实现图书系统使用到了顺序表的初始化、顺序表的建立、顺序表的插入、顺序表的删除、顺序表的查找等顺序表的基本操作。还使用到了c++的流进行数据的输入。</p> <pre><code class="language-cpp">#include&lt;iostream&gt; #include&lt;fstream&gt; #include &lt;iomanip&gt;//这三个是c++的头文件 #define MAXSIZE 20 using namespace std; typedef int Status;  //定义图书类型  typedef struct { 	string id;//ISBN 	string name;//书名 	double price;//定价  } Book; typedef struct { 	Book *elem;//存储基地址 	int length;//当前长度  }SqList; //顺序表初始化 Status InitList (SqList &amp;L) { 	L.elem = new Book[MAXSIZE];//为顺序表分配一个大小为MAXSIZE的数组空间 	if(L.elem == NULL) { 		cout&lt;&lt; "初始化分配失败！" &lt;&lt;endl; 		return 0;//初始化分配失败返回0。  	}  	L.length = 0; 	return 1;//返回一则初始化成功  } //顺序表的取值 Status GetElem (SqList L, int i, Book &amp;e) { 	if(i &lt; 1 || i &gt; L.length) { 		cout &lt;&lt; "获取值失败，原因：取值不合理！！！" &lt;&lt; endl; 		exit(1);//取值不合理直接退出。  	} 	e = L.elem[i - 1]; 	return 1;//取值成功返回一。  }  //顺序表的查找  Status LocatElem (SqList L, double e) { 	for(int i = 0; i &lt; L.length; i++) { 		if(L.elem[i].price == e) { 			return i + 1;//查找成功则返回序号 i + 1;  		} 	}  	return 0;//查找失败返回0。  }  //顺序表的插入 Status ListInsert (SqList &amp;L, int i, Book e) { 	//首先判断是否可以插入 	if(i &lt; 1 || i &gt; L.length + 1) 	{ 		return 0;  	 }  	 if(L.length == MAXSIZE)  	 { 	 	return 0; 	 } 	 for (int j = L.length - 1; j &gt;= i - 1; j--) {//插入位置及其之后的元素向后移动一位。  	 	L.elem[j + 1] = L.elem[j]; 	 } 	 L.elem[i - 1] = e;//将元素e放入到第i个元素。  	 ++L.length;//顺序表加长。  	 return 1;//插入成功返回 1。  }  //顺序表的删除 Status ListDelete (SqList &amp;L, Status i) { 	//在顺序表中删除第i个元素，首先判断i的取值范围。 	if(i &lt; 1 || i &gt; L.length) { 		cout &lt;&lt; "删除失败！！！"; 		return 0;//i值不合法，返回0.  	}  	for(int j = i; j &lt;= L.length - 1; j++) { 		L.elem[j - 1] = L.elem[j]; 	} 	--L.length; 	return 1;//删除成功返回1.  }  //编写主函数调用顺序表的算法  int main() { 	SqList L; 	int i = 0, temp = 0, location = 0; 	int choose; 	double price = 0; 	Book e; 	string head_1, head_2, head_3; 	cout &lt;&lt; "1,建立\n"; 	cout &lt;&lt; "2,输入\n"; 	cout &lt;&lt; "3,取值\n"; 	cout &lt;&lt; "4,查找\n"; 	cout &lt;&lt; "5,插入\n"; 	cout &lt;&lt; "6,删除\n"; 	cout &lt;&lt; "7,输出\n"; 	cout &lt;&lt; "8,退出\n"; 	choose = -1; 	while (choose != 0) { 		cout &lt;&lt; "请选择：\n"; 		cin &gt;&gt; choose; 		switch (choose) { 			//创建顺序表  			case 1: 				if(InitList(L) == 1) { 					cout &lt;&lt; "创建成功";  				} 				break; 			//顺序信息输入  			case 2: 				{ 					i = 0; 					fstream file; 					file.open("F://数据结构//线性表//book.txt"); 					if(!file) { 						cout &lt;&lt; "错误！ 未找到文件！" &lt;&lt; endl; 						continue; 					} 					file &gt;&gt; head_1 &gt;&gt; head_2 &gt;&gt; head_3; 					while (!file.eof()) { 						file &gt;&gt; L.elem[i].id &gt;&gt; L.elem[i].name &gt;&gt; L.elem[i].price; 						i++; 					} 					cout &lt;&lt;"输入 book.txt信息完毕\n\n"; 					L.length = i; 					file.close(); 				} 				break; 			//顺序表的取值  			//调用此函数：GetElem (SqList L, int i, Book &amp;e) 			case 3: 				{ 					cout &lt;&lt; "请输入一个位置用来取值:\n"; 					cin &gt;&gt;i; 					temp = GetElem(L,i,e); 	                if(temp!=0) 	                { 	                    cout&lt;&lt; "查找成功\n"; 	                    cout&lt;&lt; "第" &lt;&lt; i &lt;&lt; "本图书的信息是:\n"; 	                    cout&lt;&lt; left &lt;&lt; setw(15) &lt;&lt; e.id &lt;&lt; "\t"  ///在C++中，setw(int n)用来控制输出间隔。 	                        &lt;&lt; left &lt;&lt; setw(50) &lt;&lt; e.name &lt;&lt; "\t" 	                        &lt;&lt; left &lt;&lt; setw(5) &lt;&lt; e.price &lt;&lt; endl 	                        &lt;&lt; endl; 	                } 	                else cout&lt;&lt; "查找失败，位置超出范围！\n\n";	 				}		 				break; 			//顺序表的查找  			//调用此函数：LocatElem (SqList L, double e) 			case 4: 				{ 					cout &lt;&lt; "请输入要查找的价格：\n"; 					cin &gt;&gt; price; 					i = LocatElem(L,price); 					if (i == 0) { 						cout &lt;&lt; "查找失败！！！";  					} else { 						cout &lt;&lt; "此价格商品的序列号为：" &lt;&lt; i &lt;&lt;endl; 					} 				} 				break; 			//顺序表的插入 ， 			//调用此函数：Status ListInsert (SqList &amp;L, int i, Book e)  			case 5: 				{ 					cout &lt;&lt; "输入插入的位置,书本信息包括：编号 书名 价格"; 					cin &gt;&gt; location; 					cin &gt;&gt; e.id &gt;&gt; e.name &gt;&gt; e.price; 					i = ListInsert(L,location,e); 					if (i == 1) { 						cout &lt;&lt; "插入成功！！！"; 					} 				} 				break; 			//顺序表的删除	 			//调用此函数：Status ListDelete (SqList &amp;L, Status i)   			case 6: 				{ 					cout &lt;&lt; "请输入所要删除的书籍的位置："; 					cin &gt;&gt; location;  					if(ListDelete(L,location) == 1) { 						cout &lt;&lt; "删除成功！！！"; 					} 				} 				break; 			//顺序表的输出  			case 7: 				{ 					cout &lt;&lt; "当前图书系统的信息（顺序表）读出：\n"; 					for(i = 0; i &lt; L.length; i++ ) { 						cout &lt;&lt; left &lt;&lt;setw(15)&lt;&lt; L.elem[i].id &lt;&lt; "\t" &lt;&lt; left 						&lt;&lt; setw(50) &lt;&lt; L.elem[i].name &lt;&lt; "\t" &lt;&lt; left &lt;&lt; setw(5) 						&lt;&lt; L.elem[i].price &lt;&lt; endl; 					} 					cout &lt;&lt; endl; 				} 				break; 			case 8: 				choose = 0; 				break; 			default: 				break; 		} 	} 	return 0; } </code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-18600.htm">宠物打疫苗期间可以驱虫吗（宠物打完疫苗可以喷药吗）</a></p>
                                        <p>下一个：<a href="/news/article-19058.htm">猫粮十大品牌（猫粮十大品牌排）</a></p>
                                    </div>
                            </div>
            <div class="col-md-3">
                <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/free-nodes/2024-6-5-clash-windows.htm" title="6月5日→20.2M/S|2024年最新免费节点Clash/V2ray/SSR/Shadowrocket订阅链接地址">6月5日→20.2M/S|2024年最新免费节点Clash/V2ray/SSR/Shadowrocket订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-7-free-v2ray-subscribe.htm" title="9月7日→18.7M/S|2024年最新免费节点Clash/Shadowrocket/V2ray/SSR订阅链接地址">9月7日→18.7M/S|2024年最新免费节点Clash/Shadowrocket/V2ray/SSR订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-4-23-clash-node-daily-updates.htm" title="4月23日→20.8M/S|2024年最新免费节点V2ray/SSR/Shadowrocket/Clash订阅链接">4月23日→20.8M/S|2024年最新免费节点V2ray/SSR/Shadowrocket/Clash订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-4-17-clash-node.htm" title="4月17日→18.2M/S|2024年最新免费节点V2ray/Clash/Shadowrocket/SSR订阅链接">4月17日→18.2M/S|2024年最新免费节点V2ray/Clash/Shadowrocket/SSR订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-10-free-v2ray.htm" title="10月10日→19.1M/S|2024年最新免费节点Clash/SSR/Shadowrocket/V2ray订阅链接地址">10月10日→19.1M/S|2024年最新免费节点Clash/SSR/Shadowrocket/V2ray订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-3-16-clash-node-daily-updates.htm" title="3月16日20.6M/S|Shadowrocket/V2ray/SSR/Clash免费节点每天更新订阅链接">3月16日20.6M/S|Shadowrocket/V2ray/SSR/Clash免费节点每天更新订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-12-free-ssr-node.htm" title="7月12日→20.3M/S|2024年最新免费节点V2ray/Clash/Shadowrocket/SSR订阅链接地址">7月12日→20.3M/S|2024年最新免费节点V2ray/Clash/Shadowrocket/SSR订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-7-16-free-shadowrocket-node.htm" title="7月16日→19.6M/S|2024年最新免费节点V2ray/SSR/Shadowrocket/Clash订阅链接地址">7月16日→19.6M/S|2024年最新免费节点V2ray/SSR/Shadowrocket/Clash订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-4-15-node-share-links.htm" title="4月15日→18.6M/S|2024年最新免费节点SSR/Clash/V2ray/Shadowrocket订阅链接">4月15日→18.6M/S|2024年最新免费节点SSR/Clash/V2ray/Shadowrocket订阅链接</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-26-free-high-speed-nodes.htm" title="10月26日→19.2M/S|2024年最新免费节点Clash/Shadowrocket/SSR/V2ray订阅链接地址，便宜机场推荐">10月26日→19.2M/S|2024年最新免费节点Clash/Shadowrocket/SSR/V2ray订阅链接地址，便宜机场推荐</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">33</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-08/" title="2024-08 归档">2024-08</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2024-07/" title="2024-07 归档">2024-07</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">29</span> <a href="/date/2024-06/" title="2024-06 归档">2024-06</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-05/" title="2024-05 归档">2024-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-04/" title="2024-04 归档">2024-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-03/" title="2024-03 归档">2024-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">2</span> <a href="/date/2024-02/" title="2024-02 归档">2024-02</a></h4>
            </li>
                    </ul>
    </div>
</div>

            </div>
        </div>
    </div>
    <!-- //single -->
    <!-- footer -->
	
	<div class="copy-right-social">
		<div class="container">
			<div class="footer-pos">
				<a href="#ban" class="scroll"><img href="/assets/website/img/clashgithub/arrow.png" alt=" " class="img-responsive" /></a>
			</div>
            <div class="col-lg-8 footer-left">
                <p class="m-0">Clash Github官方机场站 版权所有</p>
            </div>
			<div class="copy-right-social1">
				<div class="w3l_social_icons w3l_social_icons1">
					<ul>
						<li><a href="#" class="facebook"></a></li>
						<li><a href="#" class="twitter"></a></li>
						<li><a href="#" class="google_plus"></a></li>
						<li><a href="#" class="pinterest"></a></li>
						<li><a href="#" class="instagram"></a></li>
					</ul>
				</div>
			</div>
			<div class="clearfix"> </div>
		</div>
	</div>
<!-- //footer -->
<!-- for bootstrap working -->
	<script src="/assets/website/js/frontend/clashgithub/bootstrap.js"></script>
	<script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>